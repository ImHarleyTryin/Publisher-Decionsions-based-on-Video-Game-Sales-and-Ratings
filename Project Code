# load libraries
library(tidyverse)
library(robotstxt)
library(rvest)

# Read the csv files for the dataset.
Video_Games_Data <- read.csv("Video_Games_Data.csv", na.strings = c("", "NA"))

# View the data to help locate any missing values in key variables.
View(Video_Games_Data)
summary(Video_Games_Data)

# webscraping metacritic video game data 

# Read the csv files for the dataset.
Meta_Critic_Data <- read.csv("meta_critic_data.csv")

# View the data to help locate any missing values in key variables.
View(Video_Games_Data)
summary(Video_Games_Data)
View(Meta_Critic_Data)
summary(Meta_Critic_Data)

# Join the original data set with the new scraped meta critic scores.
Clean_Video_Games_Data <- left_join(Video_Games_Data, Meta_Critic_Data, by= c("Name", "Platform"))
summary(Clean_Video_Games_Data)

# Summary of the newly joined data set shows about 2400 observations in the User score variable are classified as "tbd".
# All the "tbd" observations in the User_Score.x variable should be changed to "NA" because they are essentially missing values in the data.
Clean_Video_Games_Data$User_Score.x[Clean_Video_Games_Data$User_Score.x == "tbd"] <- ""

# Replace any values or NA's in the previous critic and user scores with any newer values.
Clean_Video_Games_Data$Critic_Score.x <- ifelse(is.na(Clean_Video_Games_Data$Critic_Score.y), Clean_Video_Games_Data$Critic_Score.x, Clean_Video_Games_Data$Critic_Score.y)
Clean_Video_Games_Data$User_Score.x <- ifelse(is.na(Clean_Video_Games_Data$User_Score.y), Clean_Video_Games_Data$User_Score.x, Clean_Video_Games_Data$User_Score.y)
summary(Clean_Video_Games_Data)
# Summary shows that about 260 and 330 NA's from the critic and user scores were replaced, respectively.

# Begin filtering out missing values for key variables in the dataset -- Critic scores, User scores, Developers, and Ratings.

# Starting with filtering the missing values from the user scores
Clean_Video_Games_Data <- Clean_Video_Games_Data %>% filter(!is.na(User_Score.x))
summary(Clean_Video_Games_Data)
# Summary shows that by filtering out the NA's for user scores first leaves 572, 263, and 343 NA's for critic score, developer, and rating, respectively, with 7923 observations remaining.

# Filter the missing values from critic scores.
Clean_Video_Games_Data <- Clean_Video_Games_Data %>% filter(!is.na(Critic_Score.x))
summary(Clean_Video_Games_Data)
# Filtering the missing values from both leaves 256 and 327 NA's for developer and rating, respectively, with 7351 observations remaining. 

# Further filtering the data set by rating will remove all missing values from key variables.
Clean_Video_Games_Data <- Clean_Video_Games_Data %>% filter(!is.na(Rating))
summary(Clean_Video_Games_Data)
# Summary shows that the final data set includes 7024 observations.

# Remove extraneous variables: Critic_Score.y and User_Score.y
Clean_Video_Games_Data <- subset(Clean_Video_Games_Data, select = -c(Critic_Score.y, User_Score.y))

# Finish cleaning up by changing Critic_Score.x and User_Score.x to Critic_Score and User_Score, respectively.
colnames(Clean_Video_Games_Data)[11] <- "Critic_Score"
colnames(Clean_Video_Games_Data)[13] <- "User_Score"

# Upon further inspection, the rating "K-A" is outdated and officially became "E" according to the ESRB.
Clean_Video_Games_Data %>% filter(Rating == "K-A")
Clean_Video_Games_Data$Rating[Clean_Video_Games_Data$Rating == "K-A"] <- "E"

# The rating "RP" stands for rating pending and is not helpful in our dataset
Clean_Video_Games_Data %>% filter(Rating == "RP")
Clean_Video_Games_Data <- Clean_Video_Games_Data %>% filter(!Rating == "RP")

# There is a special circumstance for the unique "AO" rating in the dataset that should change to an "M" rating.
Clean_Video_Games_Data %>% filter(Rating == "AO")
Clean_Video_Games_Data$Rating[Clean_Video_Games_Data$Rating == "AO"] <- "M"

# Remove the outlier for global sales "Wii Sports"
Clean_Video_Games_Data <- Clean_Video_Games_Data %>% filter(!Name == "Wii Sports")

str(Clean_Video_Games_Data)

# Counts for variables
ggplot(Clean_Video_Games_Data, aes(x = Rating)) +
  geom_bar(fill = "Dark Green") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1))

ggplot(Clean_Video_Games_Data, aes(Year_of_Release)) +
  geom_bar(fill = "Dark Green") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1))

ggplot(Clean_Video_Games_Data, aes(x = Genre)) +
  geom_bar(fill = "Dark Green") +
  geom_text(stat = "count", aes(label = ..count.., vjust = -1))


# bar plot of genres filled by ratings
ggplot(Clean_Video_Games_Data, aes(x = Genre, fill = Rating)) +
  geom_bar() 

# dot plot of critic scores and global sales
# shows that a majority of the global sales are below 10 million copies; E & M ratings have more than a few above 10.
ggplot(Clean_Video_Games_Data, aes(Critic_Score, Global_Sales)) +
  geom_jitter(alpha = 0.25, col = "blue")

# box plot of Rating by Critic score and User score
ggplot(Clean_Video_Games_Data, aes(Rating, Critic_Score)) +
  geom_boxplot(alpha = 0.25) +
  coord_flip()
ggplot(Clean_Video_Games_Data, aes(Rating, User_Score)) +
  geom_boxplot(alpha = 0.25) +
  coord_flip()

# box plot of Genre by Critic score and User score
# the highest rated genres, according to the median, are sports, strategy, shooter, role-playing and puzzle.
ggplot(Clean_Video_Games_Data, aes(Genre, Critic_Score)) +
  geom_boxplot(alpha = 0.25) +
  coord_flip()
ggplot(Clean_Video_Games_Data, aes(Genre, User_Score)) +
  geom_boxplot(alpha = 0.25) +
  coord_flip()

# dot plot of critic score and user score, linear model shows the positive relationship between both variables
# the majority of observations for both critic and user scores are above 5.0
ggplot(Clean_Video_Games_Data, aes(Critic_Score, User_Score)) +
  geom_point(alpha = 0.25) +
  geom_smooth(method = lm)
  
# time series of critic scores, significant years between 2000-2016
# shows that since 2000 critic scores have hovered around a median score of 75
ggplot(Clean_Video_Games_Data, aes(Year_of_Release, Critic_Score)) +
  geom_boxplot(alpha = 0.25)

# time series of user scores, significant years between 2000-2016
# shows that since 2000 median user scores have decreased over time 
ggplot(Clean_Video_Games_Data, aes(Year_of_Release, User_Score)) +
  geom_boxplot(alpha = 0.25)

# It might be interesting to find the top 20 developers according to average global sales.
  
## find the top 20 devlopers
Avg_Dev_Sales <- Clean_Video_Games_Data %>% 
  group_by(Developer) %>% 
  summarise(Top_Devs = mean(Global_Sales))

order(Avg_Dev_Sales$Top_Devs, decreasing = TRUE)
# Check the ordered table for any duplicates or outliers; identify the top 20 developers.

# Create a categorical variable that shows the top 20 developers
Top_20 <- c("Polyphony Digital", "DMA Design, Rockstar North", "Infinity Ward, Sledgehammer Games", "Treyarch, Sledgehammer Games", "Nintendo EAD Tokyo", "Nintendo, Namco Bandai Games", "Nintendo, Nd Cube", "Nintendo, Spike Chunsoft", "Nintendo, Nintendo Software Technology", "Tantalus Interactive, Tantatus, Nintendo", "Nintendo, Headstrong Games", "Nintendo, Camelot Software Planning", "Nintendo, Intelligent Systems", "Next Level Games, Nintendo", "Bungie Software, Bungie", "Bungie Software", "Naughty Dog, SCE/WWS", "Naughty Dog, Sony Bends", "Retro Studios, Entertainment Analysis & Development Division", "Bethesda Game Studios", "Rockstar Toronto, Rockstar Leeds", "Splash Damage, The Coalition", "SCE/WWS, Media Molecule", "Media Molecule, United Front Games", "Level 5, Brownie Brown", "Treyarch, Shaba Games", "EA DICE, Danger Close", "Rockstar North", "Sledgehammer Games", "Infinity Ward", "Nintendo", "Bungie", "343 Industries", "Game Freak", "Naughty Dog", "Retro Studios", "Bethesda Softworks", "Turn 10", "Rockstar Leeds", "The Coalition", "Nd Cube", "Media Molecule", "Level 5", "Treyarch", "EA DICE", "WB Games Montreal")

Clean_Video_Games_Data <- mutate(Clean_Video_Games_Data, Top_20_Devs = ifelse(Developer %in% Top_20, 1, 0))

## Counts for new categorical variable
Clean_Video_Games_Data %>% group_by(Top_20_Devs) %>% count()
# Games made by the top 20 developers only account for 4.14% of total games in the data set.

## plots with Top 20 developers
ggplot(Clean_Video_Games_Data, aes(Critic_Score, Global_Sales, col = Top_20_Devs)) +
  geom_jitter(alpha = 0.5)

ggplot(Clean_Video_Games_Data, aes(x = Top_20_Devs, y = Global_Sales)) +
  geom_jitter(alpha = 0.5)
# Plot shows that games by devs not in the top 20 are heavly clustered at about 1 million in global sales, while games by top 20 devs are much more varied.

Clean_Video_Games_Data %>% group_by(Top_20_Devs) %>% count(Global_Sales >= 1)
# 70.1% of games by devs in the top 20 sell at least 1 million copies, while only 16.73% of games made by other devs sell at least 1 million copies.

ggplot(Clean_Video_Games_Data, aes(x = Top_20_Devs, y = Critic_Score)) +
  geom_jitter(alpha = 0.5)
# A critic score of 80 or more is considered a critical success by industry standards.

Clean_Video_Games_Data %>% group_by(Top_20_Devs) %>% count(Critic_Score >= 80)
# 64.95% of games by devs in the top 20 score an 80 or above with critics, while only 26.36% of games by other devs score at least an 80.

ggplot(Clean_Video_Games_Data, aes(x = Top_20_Devs, y = User_Score)) +
  geom_jitter(alpha = 0.5)
# plot shows that users tend to score a game more harshly than critics as more games by the top 20 developers are more frequently below 50.

Clean_Video_Games_Data %>% group_by(Top_20_Devs) %>% count(User_Score >= 8.0)
# 46.39% of games by devs in the top 20 score an 8.0 or above with users, while only 34.19% of games by other devs score at least an 80.

# Interesting observation: users are more critical of games in general, but are less critical of games that aren't made by the top 20 developers than critics are.
